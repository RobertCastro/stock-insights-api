name: Deploy to GKE

on:
  push:
    branches:
      - main
      - 'feat/**'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ZONE: ${{ secrets.GCP_ZONE }}
  REGION: us-central1
  CLUSTER_NAME: stock-insights-cluster
  REGISTRY: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/docker-images
  BACKEND_IMAGE: backend
  DB_NAME: stockdb
  DB_USER: stockuser
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  setup:
    name: Setup and Authenticate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Install GKE Auth Plugin
        run: |
          echo "Installing gke-gcloud-auth-plugin..."
          gcloud components install gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
          
      - name: Install GKE Auth Plugin
        run: |
          echo "Installing gke-gcloud-auth-plugin..."
          gcloud components install gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

  build:
    name: Build and Push Docker Image
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Install GKE Auth Plugin
        run: |
          echo "Installing gke-gcloud-auth-plugin..."
          gcloud components install gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Verify access to Artifact Registry
        run: |
          echo "Verificando acceso al repositorio: $REGISTRY"
          gcloud artifacts repositories list --location=us-central1
          
      - name: Build Docker image
        run: |
          docker build -t $REGISTRY/$BACKEND_IMAGE:${{ github.sha }} .
          docker tag $REGISTRY/$BACKEND_IMAGE:${{ github.sha }} $REGISTRY/$BACKEND_IMAGE:latest

      - name: Push Docker image
        run: |
          docker push $REGISTRY/$BACKEND_IMAGE:${{ github.sha }}
          docker push $REGISTRY/$BACKEND_IMAGE:latest

  deploy:
    name: Deploy to GKE
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials $CLUSTER_NAME --region $REGION --project $PROJECT_ID

      - name: Update Kubernetes Deployment Image
        run: |
          sed -i "s|IMAGE_TO_REPLACE|$REGISTRY/$BACKEND_IMAGE:${{ github.sha }}|g" kubernetes/deployment.yaml

      - name: Deploy Backend Configuration
        run: |
          # Aplicar solo la configuración del backend (secretos, configmap)
          envsubst < kubernetes/backend-config.yaml | kubectl apply -f - --validate=false
          
      - name: Deploy Backend Application
        run: |
          kubectl apply -f kubernetes/deployment.yaml --validate=false
          kubectl apply -f kubernetes/service.yaml --validate=false

      - name: Deploy or Update Ingress
        run: |
          kubectl apply -f kubernetes/certificate.yaml --validate=false
          kubectl apply -f kubernetes/ingress.yaml --validate=false

      - name: Verify Deployment
        run: |
          kubectl get deployments
          kubectl get services
          kubectl get ingress
          
      - name: Get Ingress IP for DNS Configuration
        run: |
          echo "=================================================="
          echo "INFORMACIÓN: Configuración DNS"
          echo "=================================================="
          echo "Para configurar el dominio en Namecheap, use la IP del ingress:"
          echo ""
          
          # Intentar obtener la IP, pero puede que no esté disponible inmediatamente
          IP=$(kubectl get ingress stock-insights-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pendiente")
          
          if [ "$IP" != "Pendiente" ]; then
            echo "IP del ingress: $IP"
            echo ""
            echo "Configure un registro A en Namecheap:"
            echo "Tipo: A"
            echo "Host: api"
            echo "Valor: $IP"
            echo "TTL: Automático"
          else
            echo "La IP del ingress aún está pendiente de asignación."
            echo "Ejecute este comando más tarde para obtenerla:"
            echo "kubectl get ingress stock-insights-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
          fi
          echo "=================================================="