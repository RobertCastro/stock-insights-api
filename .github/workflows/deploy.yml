name: Deploy to GKE

on:
  push:
    branches:
      - main
      - 'feat/**'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  CLUSTER_NAME: stock-insights-cluster
  REGISTRY: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/docker-images
  BACKEND_IMAGE: backend
  DB_NAME: stockdb

jobs:
  build-and-deploy:
    name: 'Build and Deploy'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
        
    - name: Install GKE Auth Plugin
      run: |
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        sudo apt-get update
        sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev
      
    - name: Build Docker image
      run: |
        docker build -t $REGISTRY/$BACKEND_IMAGE:${{ github.sha }} .
        docker tag $REGISTRY/$BACKEND_IMAGE:${{ github.sha }} $REGISTRY/$BACKEND_IMAGE:latest
        
    - name: Push Docker image
      run: |
        docker push $REGISTRY/$BACKEND_IMAGE:${{ github.sha }}
        docker push $REGISTRY/$BACKEND_IMAGE:latest
        
    - name: Get Image Digest
      id: image
      run: |
        # Esperar un momento para asegurar que la imagen esté disponible en Artifact Registry
        sleep 5
        # Obtener el digest de la imagen recién subida
        DIGEST=$(gcloud artifacts docker images describe $REGISTRY/$BACKEND_IMAGE:${{ github.sha }} --format='value(image_summary.fully_qualified_digest)')
        # Si no se pudo obtener el digest, usar la tag directamente
        if [ -z "$DIGEST" ]; then
          DIGEST="$REGISTRY/$BACKEND_IMAGE:${{ github.sha }}"
        fi
        echo "Usando imagen: $DIGEST"
        echo "DIGEST=$DIGEST" >> $GITHUB_OUTPUT
        
    - name: Deploy to GKE
      run: |
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        gcloud container clusters get-credentials $CLUSTER_NAME --region $REGION --project $PROJECT_ID
        
        # Actualizar la imagen en el archivo de deployment usando la imagen con tag
        IMAGE="$REGISTRY/$BACKEND_IMAGE:${{ github.sha }}"
        echo "Reemplazando IMAGE_TO_REPLACE con $IMAGE"
        sed -i "s|IMAGE_TO_REPLACE|$IMAGE|g" kubernetes/deployment.yaml
        
        # Verificar la sustitución
        echo "Contenido del deployment.yaml después de la sustitución:"
        cat kubernetes/deployment.yaml | grep -A 3 image:
        
        # Crear secretos y configmaps para el modo inseguro (usando root sin contraseña)
        cat > kubernetes/backend-config-processed.yaml << EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: db-credentials
        type: Opaque
        stringData:
          username: root
          password: ""
          dbname: $DB_NAME
        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: api-config
        data:
          SERVER_PORT: "8000"
          DB_SSL_MODE: "disable"
        EOF
        
        # Aplicar recursos de Kubernetes
        echo "Applying backend configuration..."
        kubectl apply -f kubernetes/backend-config-processed.yaml --validate=false
        
        # Verificar si CockroachDB ya está desplegado
        if ! kubectl get deployment cockroachdb &> /dev/null; then
          echo "Deploying CockroachDB..."
          kubectl apply -f kubernetes/cockroachdb-k8s.yaml --validate=false
          
          # Esperar a que CockroachDB esté listo (con timeout más largo)
          echo "Waiting for CockroachDB to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/cockroachdb
          
          # Inicializar la base de datos manualmente - solo crear la base de datos
          echo "Initializing CockroachDB..."
          sleep 10  # Dar tiempo adicional para que el pod esté completamente listo
          kubectl exec deployment/cockroachdb -- /cockroach/cockroach sql --insecure --user=root -e "CREATE DATABASE IF NOT EXISTS $DB_NAME;"
        else
          echo "CockroachDB already deployed"
        fi
        
        # Aplicar el deployment y servicio del backend
        echo "Deploying backend application..."
        kubectl apply -f kubernetes/deployment.yaml --validate=false
        kubectl apply -f kubernetes/service.yaml --validate=false
        
        # Aplicar certificado e ingress
        echo "Setting up certificate and ingress..."
        kubectl apply -f kubernetes/certificate.yaml --validate=false
        kubectl apply -f kubernetes/ingress.yaml --validate=false
        
        # Verificar el estado del despliegue
        echo "Checking deployment status..."
        kubectl get deployments
        kubectl get services
        kubectl get ingress
        
        # Obtener la IP del ingress (podría no estar disponible inmediatamente)
        echo "=================================================="
        echo "INFORMACIÓN: Configuración DNS"
        echo "=================================================="
        echo "Para configurar el dominio en Namecheap, use la IP del ingress:"
        echo ""
        
        # Intentar obtener la IP, pero puede que no esté disponible inmediatamente
        IP=$(kubectl get ingress stock-insights-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pendiente")
        
        if [ "$IP" != "Pendiente" ]; then
          echo "IP del ingress: $IP"
          echo ""
          echo "Configure un registro A en Namecheap:"
          echo "Tipo: A"
          echo "Host: api"
          echo "Valor: $IP"
          echo "TTL: Automático"
        else
          echo "La IP del ingress aún está pendiente de asignación."
          echo "Ejecute este comando más tarde para obtenerla:"
          echo "kubectl get ingress stock-insights-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
        fi
        echo "=================================================="